/* CMSC 430 Compiler Theory and Design
   Project 1 Skeleton
   UMGC CITE
   Summer 2023 */

/* CMSC 430 Compiler Theory and Design
   Project 1 Skeleton
   UMGC CITE
   Summer 2023 */

/* This file contains the Flex input file */

%{
#include <cstdio>
#include <string>

using namespace std;

#include "listing.h"
#include "tokens.h"
%}

%option noyywrap

ws          [ \t\r]+
newline     \n
comment     \-\-.*\n
linecomment //.*
digit       [0-9]
id          [A-Za-z][A-Za-z0-9]*(_?[A-Za-z0-9]+)*
real        {digit}+"."{digit}*([eE][+-]?{digit}+)?
bool        "true"|"false"
relop       "=/="|">="|"<="|"="|">"
addop       [+-]
mulop       [*/]
remop       "rem"
expop       "**"
arrow       "=>"

/* Reserved words */
reserved    "case"|"else"|"endcase"|"endif"|"if"|"is"|"others"|"real"|"returns"|"then"|"when"

%%

{ws}                { /* Ignore whitespace */ }
{newline}           { nextLine(); }
{comment}           { nextLine(); }
{linecomment}       { /* Ignore C-style line comments */ }

/* Reserved words should return their token names */
"case"      { ECHO; return CASE; }
"else"      { ECHO; return ELSE; }
"endcase"   { ECHO; return ENDCASE; }
"endif"     { ECHO; return ENDIF; }
"if"        { ECHO; return IF; }
"is"        { ECHO; return IS; }
"others"    { ECHO; return OTHERS; }
"real"      { ECHO; return REAL; }
"returns"   { ECHO; return RETURNS; }
"then"      { ECHO; return THEN; }
"when"      { ECHO; return WHEN; }

/* Operators */
{relop}             { ECHO; return RELOP; }
{addop}             { ECHO; return ADDOP; }
{mulop}             { ECHO; return MULOP; }
"rem"               { ECHO; return REMOP; }
"**"                { ECHO; return EXPOP; }
"=>"                { ECHO; return ARROW; }

/* Literals */
{real}              { ECHO; return REAL_LITERAL; }
"true"|"false"      { ECHO; return BOOL_LITERAL; }
{id}                { ECHO; return IDENTIFIER; }
{digit}+            { ECHO; return INT_LITERAL; }

.                   { appendError(LEXICAL, yytext); }

%%

int main() {
    firstLine();

    FILE *file = fopen("lexemes.txt", "w");
    if (!file) {
        fprintf(stderr, "Error opening lexemes.txt\n");
        return 1;
    }

    int token = yylex();
    while (token) {
        fprintf(file, "%d %s\n", token, yytext);
        token = yylex();
    }

    lastLine();
    fclose(file);

    return 0;
}
