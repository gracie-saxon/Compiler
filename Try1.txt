/* CMSC 430 Compiler Theory and Design
   Project 1 Skeleton
   UMGC CITE
   Summer 2023 */

/* This file contains flex input file */

%{
#include <cstdio>
#include <string>

using namespace std;

#include "listing.h"
#include "tokens.h"

%}

%option noyywrap

ws      [ \t\r]+
comment "//".*\n
line    [\n]
id      [A-Za-z]([A-Za-z0-9_])*  // Modify to allow underscores
digit   [0-9]
dec     {digit}+
hex     "#[0-9a-fA-F]+"  // Correct hexadecimal literal format
char    '([^'\\\n]|\\[abfnrtv\\"\'?])'  // Fixed character literal regex
real    {digit}+"."{digit}+([eE][-+]?[0-9]+)?  // Real number with optional exponent
punc    [\(\),:;]
%%

{ws}            { ECHO; }
{comment}        { ECHO; nextLine(); }
{line}           { ECHO; nextLine(); }
"+"             { ECHO; return(ADDOP); }
"-"             { ECHO; return(ADDOP); } // Added Subtraction operator
"*"             { ECHO; return(MULOP); }
"/"             { ECHO; return(MULOP); } // Added Division operator
"&"             { ECHO; return(ANDOP); }
"<"             { ECHO; return(RELOP); }
"<>"            { ECHO; return(RELOP); } // Added Relational operator
">"             { ECHO; return(RELOP); }
">="            { ECHO; return(RELOP); }
"<="            { ECHO; return(RELOP); }
"=>"            { ECHO; return(ARROW); }
"|"             { ECHO; return(OROP); }  // Added Logical operator OR
"!"             { ECHO; return(NOTOP); } // Added Logical operator NOT
"^"             { ECHO; return(EXPOP); } // Added Exponentiation operator
"%"             { ECHO; return(REMOP); } // Added Remainder operator
"~"             { ECHO; return(NEGOP); } // Added Unary minus operator
begin           { ECHO; return(BEGIN_); }
case            { ECHO; return(CASE); }
character       { ECHO; return(CHARACTER); }
end             { ECHO; return(END); }
endswitch       { ECHO; return(ENDSWITCH); }
function        { ECHO; return(FUNCTION); }
integer         { ECHO; return(INTEGER); }
is              { ECHO; return(IS); }
list            { ECHO; return(LIST); }
of              { ECHO; return(OF); }
others          { ECHO; return(OTHERS); }
returns         { ECHO; return(RETURNS); }
switch          { ECHO; return(SWITCH); }
when            { ECHO; return(WHEN); }

{id}            { ECHO; return(IDENTIFIER); }
{dec}           { ECHO; return(INT_LITERAL); }
{hex}           { ECHO; return(INT_LITERAL); } // Hexadecimal literal
{char}          { ECHO; return(CHAR_LITERAL); }  // Character literal
{real}          { ECHO; return(REAL_LITERAL); }  // Real literal
{punc}          { ECHO; return(yytext[0]); }
.               { ECHO; appendError(LEXICAL, yytext); }

%%

int main() {
    firstLine();
    
    FILE *file = fopen("lexemes.txt", "wa"); 
    int token = yylex();
    while (token) {
        fprintf(file, "%d %s\n", token, yytext);
        token = yylex();
    }
    lastLine();
    fclose(file);
    return 0;
}
